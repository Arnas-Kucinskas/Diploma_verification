@page "/check_diploma_validity"
@using BlazorInputFile
@using Nethereum.Metamask.Blazor.Server.Classes;
@using Nethereum.Metamask.Blazor.Server.DB_Models;
@using Nethereum.Metamask.Blazor.Server.DAL;
@inject DiplomaService objDiplomaService;

<h1>Diploma verification</h1>

<p>A single file input that uploads automatically on file selection</p>


<table class="table">
    <thead>
        <tr>
            <th>
                <label for="Name" class="control-label"></label>
                Enter given ID <input form="Name" class="form-control" @bind="@diplomaUserID" />
            </th>
            <th>OR</th>
            <th>
                Choose a file <br />
                <InputFile OnChange="HandleSelection" />
            </th>
        </tr>
    </thead>
</table>

@if (status != 0)
{
    @if (status == 1)
    {
        <a>Loading...</a>
    }
    else
    {
        @if (hashExists)
        {<table>
                <tbody>
                    <tr>
                        <td><b>Diploma status:</b></td>
                        <td>
                            <span style="color:green"><b>✔</b></span> Verified
                        </td>
                    </tr>
                    <tr>
                        <td><b>Date of verification:</b></td>
                        <td>
                            <span style="color:green"><b>✔</b></span> @verificationDate.ToString("   yyyy-MM-dd HH:mm");
                        </td>
                    </tr>
                    <tr>
                        <td><b>Link to transaction:</b></td>
                        <td>
                            <a class="nav-link" href="@linkToExplorer">@linkToExplorer</a>
                        </td>
                    </tr>
                </tbody>
            </table>
        }
        else
        {
            <table>
                <tbody>
                    <tr>
                        <td><b>Diploma status:</b></td>
                        <td>
                            <span style="color:red"><b>✗</b></span> Not Verified
                        </td>
                    </tr>
                </tbody>
            </table>
        }
    }


}


@code {
    int status = 0;
    string linkToExplorer;
    string diplomaUserID;
    string verificationText;
    string hash;
    bool hashExists = false;
    //int blockConfirmations;
    DateTime verificationDate;

    async Task SearchWithID()
    {

    }
    async Task HandleSelection(IFileListEntry[] files)
    {
        status = 1;
        var file = files.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar
            MemoryStream ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);
            ms.Position = 0;
            PDF pdf = new PDF();
            hash = pdf.GetHashSha256(ms);

            //Get diploma based on hash
            Diploma_model diploma = objDiplomaService.GetDiplomaByHash(hash);
            if (diploma != null)
            {
                EthereumLib ethereumLib = new EthereumLib();
                Tuple<bool, DateTime> txnExistnanceAndTimecheck = await ethereumLib.DoesHashExistInTxn(diploma);
                hashExists = txnExistnanceAndTimecheck.Item1;
                if (txnExistnanceAndTimecheck.Item1)
                {
                    verificationText = "Document is verified. Link to transaction:";
                    linkToExplorer = $"https://ropsten.etherscan.io/tx/{diploma.transactionHash}";
                    verificationDate = txnExistnanceAndTimecheck.Item2;
                    //blockConfirmations = diploma.ComfirmationCount;
                }
                else
                {
                    verificationText = "Document is not verified";
                }


                //linkToExplorer = "file:\\\\DESKTOP-6QJ1MGC\\Share\\PDF";

            }
            else
            {
                hashExists = false;
                verificationText = "Document is not verified";
            }
            status = 2;
        }
    }
}
