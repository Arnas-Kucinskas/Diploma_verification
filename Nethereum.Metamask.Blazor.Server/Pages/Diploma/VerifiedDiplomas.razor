@page "/verified_Diplomas"
@using Nethereum.Metamask.Blazor.Server.DB_Models;
@using Nethereum.Metamask.Blazor.Server.DAL;
@using Nethereum.Metamask.Blazor.Server.Classes;
@using System.IO;
@using System.Threading;
@inject DiplomaService objDiplomaService;
@inject PDFService pdfService;
@inject Microsoft.JSInterop.IJSRuntime JS


<h1>Diplomas waiting for verification</h1>
@if (objDiploma == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Diploma ID</th>
                <th>Name</th>
                <th>Last Name</th>
                <th>Studies Programe</th>
                <th>Studies Direction</th>
                <th>Hash</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dip in objDiploma)
            {
            <tr>
                <td>@dip.ID</td>
                <td>@dip.Name</td>
                <td>@dip.LastName.</td>
                <td>@dip.StudiesProgramme</td>
                <td>@dip.Studiesdirection</td>
                <td>@dip.Hash</td>

                @if (@dip.ComfirmationCount == -1 || @dip.ComfirmationCount == null)
                {
                    <td>Pending</td>
                }
                else if (@dip.ComfirmationCount < 12)
                {
                    <td>@dip.ComfirmationCount / 12</td>
                }
                else
                {
                    <td>
                        <span style="color:green"><b>✔</b></span> Verified
                    </td>
                }
                <td><input type="button" class="btn btn-primary" @onclick="@(e => DownloadPDF(dip))" value="Download PDF" /></td>
            </tr>
            }
        </tbody>
    </table>
    <input type="button" class="btn btn-danger" @onclick="@DeleteAllDiplomas" value="Delete all diplomas" />
    <input type="button" class="btn btn-primary" @onclick="@OpenShare" value="Create all in share" />
}

@code {
    List<Diploma_model> objDiploma;

    protected override async Task OnInitializedAsync()
    {
        objDiploma = await Task.Run(() => objDiplomaService.GetAllDiplomas(1));
        CheckStatuses();


    }


    protected async Task CheckStatuses()
    {
        while (true)
        {
            //List<string> txnList = new List<string>();
            Dictionary<string, long> txndict = new Dictionary<string, long>();
            EthereumLib ethlib = new EthereumLib();
            foreach (var item in objDiploma)
            {
                if (!txndict.ContainsKey(item.transactionHash))
                {
                    txndict.Add(item.transactionHash, 0);
                }
            }
            txndict = await ethlib.GetConfirmations(txndict);
            List<Diploma_model> tmpObjDiploma = new List<Diploma_model>();
            foreach (var diploma in objDiploma)
            {
                foreach (var txn in txndict)
                {
                    if (diploma.transactionHash == txn.Key)
                    {
                        diploma.ComfirmationCount = (int)txn.Value;
                        tmpObjDiploma.Add(diploma);
                    }
                }
            }
            objDiploma = tmpObjDiploma;
            objDiplomaService.UpdateDiplomas(objDiploma);
            StateHasChanged();
            //Check for break
            Thread.Sleep(500);
        }
    }

    protected async Task DeleteAllDiplomas()
    {
        foreach (var item in objDiploma)
        {
            objDiplomaService.DeleteDiploma(item);
        }
        await OnInitializedAsync();
    }
    protected async Task OpenShare()
    {
        PDF pdf = new PDF();
        List<MemoryStream> msList = new List<MemoryStream>();

        List<Tuple<MemoryStream, string>> tupleList = new List<Tuple<MemoryStream, string>>();

        foreach (var item in objDiploma)
        {
            PdfInfo obj = pdfService.GetPDFByDiplomaID(item);
            MemoryStream ms = await Task.Run(() => pdf.createMemeoryStream(obj.pdfBase64Code));
            string fileName = item.Name + "_" + item.LastName + "_" + item.SB_nr;
            tupleList.Add(new Tuple<MemoryStream, string>(ms, fileName));
        }
        foreach (var item in tupleList)
        {
            await Task.Run(() => pdf.SavePDFToDisk(item.Item1, item.Item2));
        }
        // Tuple<string, String> diplomaInfo =  new Tuple<string, String>(documentHash, Convert.ToBase64String(streamArray));
    }
    protected void DownloadPDF(Diploma_model diploma)
    {
        PDF pdf = new PDF();
        //download pdf
        MemoryStream pdfOutput = pdfService.GetPDFForDownload(diploma);
        string fileName = diploma.Name + "_" + diploma.LastName + "_" + diploma.IdentityNumber + ".pdf";
        JS.SaveAs(fileName, pdfOutput.ToArray());
    }
}
