@page "/verified_Diplomas"
@using Nethereum.Metamask.Blazor.Server.DB_Models;
@using Nethereum.Metamask.Blazor.Server.DAL;
@using Nethereum.Metamask.Blazor.Server.Classes;
@using System.IO;
@inject DiplomaService objDiplomaService;
@inject PDFService pdfService;
@inject Microsoft.JSInterop.IJSRuntime JS


<h1>Diplomas waiting for verification</h1>
@if (objDiploma == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Diploma ID</th>
                <th>Name</th>
                <th>Last Name</th>
                <th>Studies Programe</th>
                <th>Studies Direction</th>
                <th>Hash</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dip in objDiploma)
            {
                <tr>
                    <td>@dip.ID</td>
                    <td>@dip.Name</td>
                    <td>@dip.LastName.</td>
                    <td>@dip.StudiesProgramme</td>
                    <td>@dip.Studiesdirection</td>
                    <td>@dip.Hash</td>
                    <td><input type="button" class="btn btn-primary" @onclick="@(e => DownloadPDF(dip))" value="Download PDF" /></td>
                </tr>
            }
        </tbody>
    </table>
    <input type="button" class="btn btn-danger" @onclick="@DeleteAllDiplomas" value="Delete all diplomas" />
}

@code {
    List<Diploma_model> objDiploma;
    protected override async Task OnInitializedAsync()
    {
        objDiploma = await Task.Run(() => objDiplomaService.GetAllDiplomas(1));
    }
    protected async Task DeleteAllDiplomas()
    {
        foreach (var item in objDiploma)
        {
            objDiplomaService.DeleteDiploma(item);
        }
        await OnInitializedAsync();
    }
    protected void DownloadPDF(Diploma_model diploma)
    {
        PDF pdf = new PDF();
        //download pdf
        MemoryStream pdfOutput = pdfService.GetPDFForDownload(diploma);
        JS.SaveAs("test.pdf", pdfOutput.ToArray());
    }
}
