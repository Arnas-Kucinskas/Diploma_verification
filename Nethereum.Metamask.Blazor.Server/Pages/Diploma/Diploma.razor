@page "/diploma"
@using Nethereum.Metamask.Blazor.Server.DB_Models;
@using Nethereum.Metamask.Blazor.Server.DAL;
@inject DiplomaService objDiplomaService;
@inject IJSRuntime jsRuntime;
@inject MetamaskService metamaskService;
@inject MetamaskInterceptor metamaskInterceptor;
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Metamask.Blazor.Server.Classes
@using Nethereum.Hex.HexConvertors.Extensions;
@using Nethereum.Contracts;
@using Nethereum.Web3.Accounts;

<NavLink class="nav-link" href="AddDiploma">
    <span class="oi oi-plus" aria-hidden="true"></span> Add New
</NavLink>
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-primary" @onclick="@VerifyDoccuments" value="Verify Doccuments" />
            <input type="button" class="btn btn-primary" @onclick="@ImportDocuments" value="Import" />
        </div>
    </div>
</div>

<h1>Diplomas waiting for verification</h1>
@if (objDiploma == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Diploma ID</th>
                <th>Name</th>
                <th>Last Name</th>
                <th>Studies Programe</th>
                <th>Studies Direction</th>
                <th>Hash</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dip in objDiploma)
            {
                <tr>
                    <td>@dip.ID</td>
                    <td>@dip.Name</td>
                    <td>@dip.LastName.</td>
                    <td>@dip.StudiesProgramme</td>
                    <td>@dip.Studiesdirection</td>
                    <td>@dip.Hash</td>
                    <td>
                        <a class="nav-link" href="EditDiploma/@dip.ID">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit
                        </a>
                        <a class="nav-link" href="DeleteDiploma/@dip.ID">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <input type="button" class="btn btn-danger" @onclick="@DeleteAllDiplomas" value="Delete all diplomas" />
}

@code {
    List<Diploma_model> objDiploma;

    protected override async Task OnInitializedAsync()
    {
        objDiploma = await Task.Run(() => objDiplomaService.GetAllDiplomasInQueue());
    }

    protected async Task ImportDocuments()
    {
        var ImportedObj = File.ReadAllLines("D:\\pdf\\import.csv").Skip(1);
        List<Diploma_model> importedDiplomas = new List<Diploma_model>();
        foreach (var item in ImportedObj)
        {
            string[] values = item.Split(',');
            Diploma_model diploma = new Diploma_model();
            diploma.Name = values[0];
            diploma.LastName = values[1];
            diploma.IdentityNumber = Convert.ToInt64(values[2]);
            diploma.StudiesProgramme = values[3];
            diploma.StudiesProgrammeGovermentCode = values[4];
            diploma.Degree = values[5];
            diploma.Studiesdirection = values[6];
            diploma.RegistrationNr = values[7];
            diploma.DateOfIssue = Convert.ToDateTime(values[8]);
            importedDiplomas.Add(diploma);

        }
        foreach (var item in importedDiplomas)
        {
            objDiplomaService.Create(item);
        }
        await OnInitializedAsync();
    }
    protected async Task DeleteAllDiplomas()
    {
        foreach (var item in objDiploma)
        {
            objDiplomaService.DeleteDiploma(item);
        }
        await OnInitializedAsync();
    }
    protected async Task VerifyDoccuments()
    {
        bool EthereumEnabled = await metamaskService.EnableEthereumAsync();
        string selectedAccount = "";
        List<byte[]> hashesList = new List<byte[]>();

        if (EthereumEnabled)
        {
            selectedAccount = await metamaskService.GetSelectedAccount();
        }
        else
        {
            //??
        }

        try
        {
            var web3 = new Nethereum.Web3.Web3();
            web3.Client.OverridingRequestInterceptor = metamaskInterceptor;
            //TO DO
            //create a function to check how much GAS is required.
            web3.TransactionManager.DefaultGas = 1000000;
            SmartContract smartContract = new SmartContract();


            var contract = web3.Eth.GetContract(smartContract.abi, smartContract.address);
            var function = contract.GetFunction(smartContract.functionName);
            foreach (var item in objDiploma)
            {
                hashesList.Add(item.Hash.HexToByteArray());
            }
            //TO DO
            //add logic when transaction fails
            var result = await function.SendTransactionAsync(selectedAccount, hashesList);

            if (result == null)
            {
                //???
            }
            objDiplomaService.UpdateDiplomas(objDiploma, 1, result);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            throw;
        }
    }
}
