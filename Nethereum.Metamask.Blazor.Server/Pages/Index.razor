@page "/"
@using Nethereum.Web3;
@using Nethereum.Hex.HexTypes;
@using Nethereum.Metamask.Blazor.Server.DB_Models;
@using Nethereum.Metamask.Blazor.Server.DAL;
@using Nethereum.Metamask.Blazor.Server.Classes;
@using System.IO;
@inject DiplomaService objDiplomaService;
@inject PDFService pdfService;
@inject Microsoft.JSInterop.IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime;
@inject MetamaskService metamaskService;
@inject MetamaskInterceptor metamaskInterceptor;
<br />
Available Metamask : @MetamaskAvailable
<br />
Enabled Ethereum : @EthereumEnabled
<br />
Selected Account: @SelectedAccount
<br />
<button @onclick="@EnableEthereumAsync">Enable Ethereum</button>
<br />
<button @onclick="@GetBlockHashAsync">Get BlockHash</button>
<br />
@BlockHash
<br />
<button @onclick="@TransferEtherAsync">Transfer Ether</button>
<br>
<button class="btn-primary" @onclick="@DownloadPreMadePDF">Download premade PDF</button>
<br />
@TransactionHash
@ErrorTransferMessage
@code{

    bool MetamaskAvailable { get; set; }
    bool EthereumEnabled { get; set; }
    string SelectedAccount { get; set; }
    string BlockHash { get; set; }
    string TransactionHash { get; set; }
    string ErrorTransferMessage { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        MetamaskAvailable = await metamaskService.CheckMetamaskAvailability();
        NavigationManager.NavigateTo("Diploma");
    }

    protected async Task EnableEthereumAsync()
    {
        EthereumEnabled = await metamaskService.EnableEthereumAsync();
        if (EthereumEnabled)
        {
            SelectedAccount = await metamaskService.GetSelectedAccount();
        }
    }

    protected async Task GetBlockHashAsync()
    {
        var web3 = new Nethereum.Web3.Web3();
        web3.Client.OverridingRequestInterceptor = metamaskInterceptor;
        var block = await web3.Eth.Blocks.GetBlockWithTransactionsByNumber.SendRequestAsync(new HexBigInteger(1));
        BlockHash = block.BlockHash;
    }

    protected void DownloadPreMadePDF()
    {
        PDF pdf = new PDF();
        //download pdf
        //MemoryStream pdfOutput = pdf.GeneratePDF(diploma);
        //MemoryStream pdfOutput = pdf.GeneratePDF(diploma);
        Diploma_model d = new Diploma_model();
        d.Degree = "INFORMATIKOS INŽINERIJOS BAKALAURO";
        d.IdentityNumber = 39500000000;
        d.LastName = "ĄČĘĖĮŠŲŪ(";
        d.Name = "John";
        d.StudiesProgramme = "Informacinės technologijos";
        d.Studiesdirection = "INFORMATIKOS INŽINERIJA";
        d.quickSearch = "lalalalala";
        Tuple<string, String> tuple = pdf.CreatePDF(d);
        byte[] pdfbytes = Convert.FromBase64String(tuple.Item2);
        MemoryStream stream = new MemoryStream(pdfbytes);
        JS.SaveAs("test.pdf", stream.ToArray());

    }

    protected async Task TransferEtherAsync()
    {
        try
        {
            var web3 = new Nethereum.Web3.Web3();
            web3.Client.OverridingRequestInterceptor = metamaskInterceptor;

            TransactionHash = await web3.Eth.GetEtherTransferService().TransferEtherAsync("0x13f022d72158410433cbd66f5dd8bf6d2d129924", 0.001m);
        }
        catch (Exception ex)
        {
            ErrorTransferMessage = ex.Message;
        }
    }
}
